use libblas::level2;
use libblas::unstable::matrix;
mod fixtures;
mod utils;

#[test]
fn gbmv() {
    let a = vec![
        -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0,
        2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0,
    ];
    let x = vec![1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 5.0];
    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];

    level2::gbmv('n', 6, 9, 1, 1, 1.5, &a, 3, &x, 1, 2.5, &mut y, 1);
    assert_eq!(y, vec![4.0, 1.0, 4.0, 1.0, 4.0, 1.0]);

    let a = vec![];
    let x = vec![];
    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gbmv('n', 6, 0, 1, 1, 1.5, &a, 3, &x, 1, 2.5, &mut y, 1);
    assert_eq!(y, vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0]);

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gbmv('n', 6, 9, 1, 1, 0.0, &a, 3, &x, 1, 1.0, &mut y, 1);
    assert_eq!(y, vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0]);

    let a = vec![
        -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0,
        2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0,
    ];
    let x = vec![1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 5.0];
    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gbmv('n', 3, 9, 1, 1, 1.5, &a, 3, &x, 1, 2.5, &mut y, 2);
    assert_eq!(y, vec![4.0, 1.0, 1.0, 1.0, 4.0, 1.0]);

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gbmv('n', 3, 9, 1, 1, 1.5, &a, 3, &x, 1, 0.0, &mut y, 2);
    assert_eq!(y, vec![1.5, 1.0, -1.5, 1.0, 1.5, 1.0]);

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gbmv('n', 6, 9, 1, 1, 1.5, &a, 3, &x, 1, 0.0, &mut y, 1);
    assert_eq!(y, vec![1.5, -1.5, 1.5, -1.5, 1.5, -1.5]);

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gbmv(
        't',
        6,
        9,
        1,
        1,
        1.5,
        &a,
        3,
        &[1.0, 1.0, 2.0, 2.0, 3.0, 3.0],
        1,
        1.0,
        &mut y,
        1,
    );
    assert_eq!(y, vec![2.5, -0.5, 2.5, -0.5, 2.5, 5.5, -3.5, 1.0, 1.0]);

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gbmv('n', 6, 9, 1, 1, 0.0, &a, 3, &x, 1, 2.5, &mut y, 1);
    assert_eq!(y, vec![2.5, 2.5, 2.5, 2.5, 2.5, 2.5]);

    let x = vec![1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 3.0];
    let mut y = vec![9.0, 0.0, 0.0, 0.0, 0.0, -9.0];
    level2::gbmv('n', 6, 9, 1, 1, 1.0, &a, 3, &x, -1, 0.0, &mut y, -1);
    assert_eq!(y, vec![-1.0, 1.0, -1.0, 1.0, 1.0, 2.0]);

    let result = std::panic::catch_unwind(|| {
        level2::gbmv(
            'x',
            6,
            9,
            1,
            1,
            1.5,
            &[],
            3,
            &[],
            1,
            2.5,
            &mut [],
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::gbmv(
            'n',
            6,
            1,
            1,
            1,
            1.5,
            &[],
            2,
            &[],
            1,
            2.5,
            &mut [],
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::gbmv(
            'n',
            6,
            1,
            1,
            1,
            1.5,
            &[],
            3,
            &[],
            1,
            2.5,
            &mut [],
            0,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::gbmv(
            'n',
            6,
            1,
            1,
            1,
            1.5,
            &[],
            3,
            &[],
            0,
            2.5,
            &mut [],
            1,
        )
    });
    assert!(result.is_err());
}

#[test]
fn gemv() {
    let a = vec![
        -0.05487747,
        0.25014132,
        0.61824329,
        -0.17262350,
        -2.22390027,
        -1.2636144,
        0.35872890,
        -0.01104548,
        -0.94064916,
        -0.11582532,
        -0.81496871,
        0.2422635,
        -1.42509839,
        0.36594112,
        0.24841265,
        0.06528818,
        0.01915639,
        0.2573384,
        -0.64901008,
        -0.11916876,
        0.66413570,
        1.10096910,
        0.14377148,
        -0.1177536,
        -0.91206837,
        -1.43758624,
        -0.79708953,
        1.25408311,
        0.77214219,
        -0.2195156,
        -0.42481028,
        -0.41898010,
        0.99698686,
        -0.27577803,
        1.25601882,
        0.6466744,
        1.29931230,
        -0.87326211,
        0.00837096,
        -0.88087172,
        0.59625902,
        0.1197176,
        -0.28217388,
        1.45598840,
        0.22901959,
        0.99654393,
        0.78185918,
        -0.7767766,
        -0.61598991,
        0.04658030,
        -1.13038578,
        0.57671878,
        -1.28074943,
        1.6254473,
    ];

    let x = vec![1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 5.0];
    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gemv('n', 6, 9, 1.5, &a, 6, &x, 1, 2.5, &mut y, 1);
    approximately!(
        y,
        vec![
            -7.799_595_819_786_191,
            -0.909_877_403_639_257,
            -1.3999755270779133,
            14.987_896_066_159_01,
            6.220_292_953_774_333,
            11.557443037629128
        ]
    );

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gemv('n', 6, 9, 1.5, &a, 6, &x, -1, 0.0, &mut y, -1);
    approximately!(
        y,
        vec![
            -4.425_026_189_535_856,
            -12.524016615003347,
            7.889_780_871_570_11,
            1.5491376277059317,
            -4.6228371150791645,
            -12.558390671387315
        ]
    );

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gemv('n', 6, 9, 1.5, &a, 6, &x, -1, 0.0, &mut y, 1);
    approximately!(
        y,
        vec![
            -12.558390671387315,
            -4.6228371150791645,
            1.5491376277059317,
            7.889_780_871_570_11,
            -12.524016615003347,
            -4.425_026_189_535_856
        ]
    );

    let x = vec![1.0, 1.0, 2.0, 2.0, 3.0, 3.0];
    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 5.0];
    level2::gemv('t', 6, 9, 1.5, &a, 6, &x, -1, 1.0, &mut y, 1);
    approximately!(
        y,
        vec![
            -2.015_725_439_414_382,
            -1.463_905_897_922_814,
            -2.410_363_213_159_144,
            2.877_536_442_130_804,
            -7.373_524_732_887_745,
            2.2206097096204758,
            4.373_688_740_655_78,
            12.966479852795601,
            1.293_702_594_935_894
        ]
    );

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 5.0];
    level2::gemv('t', 6, 9, 0.0, &a, 6, &x, -1, 1.0, &mut y, 1);
    assert_eq!(y, vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 5.0]);

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 5.0];
    level2::gemv('t', 6, 9, 0.0, &a, 6, &x, -1, 1.5, &mut y, 1);
    assert_eq!(y, vec![1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 6.0, 6.0, 7.5]);

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 5.0];
    level2::gemv('t', 3, 4, 1.0, &a, 6, &x, -2, 0.0, &mut y, -2);
    approximately!(
        y,
        vec![
            -1.521_232_008_934_021,
            1.0000000000000000,
            -3.2950003892183304,
            1.0000000000000000,
            0.11344654485583305,
            1.0000000000000000,
            0.953_893_508_762_121_2,
            4.0000000000000000,
            5.0000000000000000
        ]
    );

    let result = std::panic::catch_unwind(|| {
        level2::gemv(
            'x',
            3,
            4,
            1.0,
            &[],
            6,
            &[],
            -2,
            0.0,
            &mut [],
            -2,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::gemv('t', 1, 7, 0.0, &[], 6, &[], 1, 0.0, &mut [], 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::gemv('t', 1, 7, 0.0, &[], 7, &[], 0, 0.0, &mut [], 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::gemv('t', 1, 7, 0.0, &[], 7, &[], 1, 0.0, &mut [], 0)
    });
    assert!(result.is_err());
}

#[test]
fn ger() {
    let mut a = vec![
        -0.05487747,
        0.25014132,
        0.61824329,
        -0.17262350,
        -2.22390027,
        -1.2636144,
        0.35872890,
        -0.01104548,
        -0.94064916,
        -0.11582532,
        -0.81496871,
        0.2422635,
        -1.42509839,
        0.36594112,
        0.24841265,
        0.06528818,
        0.01915639,
        0.2573384,
        -0.64901008,
        -0.11916876,
        0.66413570,
        1.10096910,
        0.14377148,
        -0.1177536,
        -0.91206837,
        -1.43758624,
        -0.79708953,
        1.25408311,
        0.77214219,
        -0.2195156,
        -0.42481028,
        -0.41898010,
        0.99698686,
        -0.27577803,
        1.25601882,
        0.6466744,
        1.29931230,
        -0.87326211,
        0.00837096,
        -0.88087172,
        0.59625902,
        0.1197176,
        -0.28217388,
        1.45598840,
        0.22901959,
        0.99654393,
        0.78185918,
        -0.7767766,
        -0.61598991,
        0.04658030,
        -1.13038578,
        0.57671878,
        -1.28074943,
        1.6254473,
    ];
    let x = vec![
        0.10330280, 0.62787610, 0.09179221, 0.10161032, 0.33920221, 0.93821373,
    ];
    let y = vec![
        0.823443247,
        0.615896282,
        0.502300758,
        0.008093905,
        0.222554779,
        0.787857479,
        0.874444904,
        0.613885907,
        0.617612043,
    ];
    level2::ger(3, 4, 1.5, &x, 2, &y, 2, &mut a, 6);
    approximately!(
        matrix::slice(a.clone(), 6, 1, 3, 1, 4),
        vec![
            7.271_851_535_491_725E-2,
            0.363_519_835_152_594_8,
            1.0372139062035037,
            0.43656249423752236,
            5.811_546_297_450_221E-2,
            -0.685_076_881_521_105_5,
            -1.3906126226474256,
            0.39658429928803307,
            0.36164925525028524,
            -0.513_511_153_087_940_2,
            1.232_087_945_003_623_7E-3,
            1.109_056_140_254_812
        ],
        1E-7
    );

    let mut a = vec![
        -0.05487747,
        0.25014132,
        0.61824329,
        -0.17262350,
        -2.22390027,
        -1.2636144,
        0.35872890,
        -0.01104548,
        -0.94064916,
        -0.11582532,
        -0.81496871,
        0.2422635,
        -1.42509839,
        0.36594112,
        0.24841265,
        0.06528818,
        0.01915639,
        0.2573384,
        -0.64901008,
        -0.11916876,
        0.66413570,
        1.10096910,
        0.14377148,
        -0.1177536,
        -0.91206837,
        -1.43758624,
        -0.79708953,
        1.25408311,
        0.77214219,
        -0.2195156,
        -0.42481028,
        -0.41898010,
        0.99698686,
        -0.27577803,
        1.25601882,
        0.6466744,
        1.29931230,
        -0.87326211,
        0.00837096,
        -0.88087172,
        0.59625902,
        0.1197176,
        -0.28217388,
        1.45598840,
        0.22901959,
        0.99654393,
        0.78185918,
        -0.7767766,
        -0.61598991,
        0.04658030,
        -1.13038578,
        0.57671878,
        -1.28074943,
        1.6254473,
    ];
    let y = vec![
        0.823443247,
        0.615896282,
        0.502300758,
        0.008093905,
        0.222554779,
        0.787857479,
        0.0,
        0.613885907,
        0.617612043,
    ];

    level2::ger(3, 4, 1.5, &x, -2, &y, -2, &mut a, 6);
    approximately!(
        matrix::slice(a.clone(), 6, 1, 3, 1, 4),
        vec![
            -5.487_747_117_877_006_5E-2,
            0.25014132261276245,
            0.618_243_277_072_906_5,
            0.471_965_487_097_094_6,
            1.959_771_186_792_713_7E-2,
            -0.906_163_355_260_035_6,
            -1.1695261489084956,
            0.43510205039460814,
            0.32624626239071297,
            -0.23003943308711516,
            -5.790_245_852_501_652E-3,
            0.791_731_681_037_471_5
        ],
        1E-7
    );

    let mut a = vec![
        -0.05487747,
        0.25014132,
        0.61824329,
        -0.17262350,
        -2.22390027,
        -1.2636144,
        0.35872890,
        -0.01104548,
        -0.94064916,
        -0.11582532,
        -0.81496871,
        0.2422635,
        -1.42509839,
        0.36594112,
        0.24841265,
        0.06528818,
        0.01915639,
        0.2573384,
        -0.64901008,
        -0.11916876,
        0.66413570,
        1.10096910,
        0.14377148,
        -0.1177536,
        -0.91206837,
        -1.43758624,
        -0.79708953,
        1.25408311,
        0.77214219,
        -0.2195156,
        -0.42481028,
        -0.41898010,
        0.99698686,
        -0.27577803,
        1.25601882,
        0.6466744,
        1.29931230,
        -0.87326211,
        0.00837096,
        -0.88087172,
        0.59625902,
        0.1197176,
        -0.28217388,
        1.45598840,
        0.22901959,
        0.99654393,
        0.78185918,
        -0.7767766,
        -0.61598991,
        0.04658030,
        -1.13038578,
        0.57671878,
        -1.28074943,
        1.6254473,
    ];
    let y = vec![
        0.823443247,
        0.615896282,
        0.502300758,
        0.008093905,
        0.222554779,
        0.787857479,
        0.0, // this ZERO!!! will cause the first "column" to be unchanged in "expect"
        0.613885907,
        0.617612043,
    ];
    level2::ger(3, 4, 0.0, &x, -2, &y, -2, &mut a, 6);
    approximately!(
        matrix::slice(a.clone(), 6, 1, 3, 1, 4),
        vec![
            -5.487_747_117_877_006_5E-2,
            0.25014132261276245,
            0.618_243_277_072_906_5,
            0.35872888565063477,
            -1.104_548_014_700_412_8E-2,
            -0.940_649_151_802_063,
            -1.4250984191894531,
            0.365_941_107_273_101_8,
            0.24841265380382538,
            -0.649_010_062_217_712_4,
            -0.11916875839233398,
            0.664_135_694_503_784_2
        ],
        1E-7
    );

    let result =
        std::panic::catch_unwind(|| level2::ger(3, 2, 1.0, &[], 2, &[], 2, &mut [], 2));
    assert!(result.is_err());

    let result =
        std::panic::catch_unwind(|| level2::ger(3, 2, 1.0, &[], 0, &[], 2, &mut [], 5));
    assert!(result.is_err());

    let result =
        std::panic::catch_unwind(|| level2::ger(3, 2, 1.0, &[], 2, &[], 0, &mut [], 5));
    assert!(result.is_err());
}

#[test]
fn sbmv() {
    let a = vec![
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.2629542848807933,
        0.0,
        0.0,
        0.0,
        0.0,
        -0.9285670347135381,
        -0.2947204467905602,
        0.0,
        0.0,
        0.0,
        -1.1476570092363514,
        -0.28946157368822334,
        -0.29921511789731614,
        0.0,
        0.0,
        0.43568329935571865,
        -1.237538421929958,
        -0.22426788527830935,
        0.37739564598170106,
        0.0,
        -0.057106774383808755,
        0.5036079722337261,
        1.085769362145687,
        -0.6909538396968303,
        -1.2845993538721883,
        -0.23570655643950122,
        -0.5428882550102544,
        -0.4333103174567822,
        -0.6494716467962331,
        0.726750747385451,
        1.1519117540872,
    ];

    let x = vec![
        -0.17262350264585732,
        -2.2239002740099374,
        -1.263614384970583,
        0.3587288959713519,
        -0.011045478465663564,
        -0.9406491626186084,
    ];
    let mut y = vec![
        -0.17262350264585732,
        -2.2239002740099374,
        -1.263614384970583,
        0.3587288959713519,
        -0.011045478465663564,
        -0.9406491626186084,
    ];

    level2::sbmv('u', 6, 5, 0.75, &a, 6, &x, 1, 0.25, &mut y, 1);
    approximately!(
        y,
        vec![
            2.7137399400666355,
            0.37601484101785054,
            0.835_412_087_374_357_3,
            2.8753927545108686,
            -2.552_313_941_951_035,
            0.11808677629424658
        ]
    );

    let a = vec![
        0.42224244493991137,
        -0.7566161579452455,
        -0.5090229720808566,
        -0.7133912411518395,
        -0.5207411698065698,
        -0.8821312454529107,
        0.7525384253822267,
        0.5578293548896909,
        0.5946176517754793,
        -0.08945109276100993,
        -0.17983183590695262,
        0.0,
        0.3094478561542928,
        -0.29360545612871647,
        -0.459479708224535,
        0.9853681223466992,
        0.0,
        0.0,
        -0.0437639313749969,
        0.8481489396654069,
        0.19752193428575993,
        0.0,
        0.0,
        0.0,
        -0.703576878644526,
        -0.9738448490388691,
        0.0,
        0.0,
        0.0,
        0.0,
        -0.008812844287604094,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ];

    let mut y = vec![
        -0.17262350264585732,
        -2.2239002740099374,
        -1.263614384970583,
        0.3587288959713519,
        -0.011045478465663564,
        -0.9406491626186084,
    ];

    level2::sbmv('l', 6, 5, 0.75, &a, 6, &x, 1, 0.25, &mut y, 1);
    approximately!(
        y,
        vec![
            2.0812734977655536,
            -1.9542666589882982,
            -2.2440378506435685,
            -0.689_631_294_205_300_9,
            1.5703642633315664,
            -0.687_425_433_064_982_2
        ]
    );

    let mut y = vec![
        -0.17262350264585732,
        -2.2239002740099374,
        -1.263614384970583,
        0.3587288959713519,
        -0.011045478465663564,
        -0.9406491626186084,
    ];

    level2::sbmv('l', 6, 5, 0.75, &a, 6, &x, -1, 0.25, &mut y, -1);
    approximately!(
        y,
        vec![
            2.284_023_531_830_803,
            0.184_315_569_505_344_9,
            -1.295_281_067_298_233,
            1.4444836256888887,
            0.28382396673364896,
            0.995_121_546_895_196_4
        ]
    );

    let mut y = vec![
        -0.17262350264585732,
        -2.2239002740099374,
        -1.263614384970583,
        0.3587288959713519,
        -0.011045478465663564,
        -0.9406491626186084,
    ];

    level2::sbmv('l', 3, 5, 0.75, &a, 6, &x, 2, 0.25, &mut y, -2);
    approximately!(
        y,
        vec![
            -0.508_478_316_849_106_9,
            -2.223_900_318_145_752,
            -0.935_756_242_470_331_2,
            0.35872888565063477,
            0.663_842_036_684_973,
            -0.940_649_151_802_063
        ]
    );

    let mut y = vec![
        -0.17262350264585732,
        -2.2239002740099374,
        -1.263614384970583,
        0.3587288959713519,
        -0.011045478465663564,
        -0.9406491626186084,
    ];

    level2::sbmv('l', 6, 5, 0.0, &a, 6, &x, 1, 1.0, &mut y, 1);
    assert_eq!(
        y,
        vec![
            -0.17262350264585732,
            -2.2239002740099374,
            -1.263614384970583,
            0.3587288959713519,
            -0.011045478465663564,
            -0.9406491626186084
        ]
    );

    let mut y = vec![
        -0.17262350264585732,
        -2.2239002740099374,
        -1.263614384970583,
        0.3587288959713519,
        -0.011045478465663564,
        -0.9406491626186084,
    ];
    level2::sbmv('l', 6, 5, 0.25, &a, 6, &x, 1, 1.0, &mut y, 1);
    approximately!(
        y,
        vec![
            0.535_519_624_046_250_3,
            -2.689_997_511_296_372,
            -1.9063258316600895,
            9.895_771_377_798_157E-2,
            0.513_329_732_683_193,
            -1.091_403_533_506_885
        ]
    );

    let mut y = vec![
        -0.17262350264585732,
        -2.2239002740099374,
        -1.263614384970583,
        0.3587288959713519,
        -0.011045478465663564,
        -0.9406491626186084,
    ];
    level2::sbmv('l', 6, 5, 0.0, &a, 6, &x, 1, 0.0, &mut y, 1);
    assert_eq!(y, vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.0]);

    let result = std::panic::catch_unwind(|| {
        level2::sbmv('x', 6, 5, 0.0, &[], 6, &[], 1, 0.0, &mut [], 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::sbmv('l', 1, 7, 0.0, &[], 6, &[], 1, 0.0, &mut [], 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::sbmv('l', 1, 3, 0.0, &[], 6, &[], 0, 0.0, &mut [], 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::sbmv('l', 1, 3, 0.0, &[], 6, &[], 1, 0.0, &mut [], 0)
    });
    assert!(result.is_err());
}

#[test]
fn spmv() {
    let x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        -0.8874201453170976,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
        -1.1343309685168443,
        1.4623515387464268,
    ];
    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
        0.310141376504687,
        1.7025705860144955,
    ];
    level2::spmv('u', 8, 1.0, &fixtures::MSP8X8(), &x, 1, 0.25, &mut y, 1);
    approximately!(
        y,
        vec![
            -0.967_177_891_130_313,
            2.164_717_175_258_697,
            -6.261_881_823_577_367,
            -0.28748768382407186,
            3.5511096434863134,
            6.216_390_695_516_28,
            -3.8875544026997284,
            2.054_897_550_164_931
        ]
    );

    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
        0.310141376504687,
        1.7025705860144955,
    ];
    level2::spmv('u', 8, 1.0, &fixtures::MSP8X8(), &x, -1, 0.25, &mut y, -1);
    approximately!(
        y,
        vec![
            -1.7251108158053823,
            4.929_164_894_235_39,
            -3.217_109_866_647_828,
            0.113_846_600_163_210_8,
            -3.3658783555330647,
            3.1501275434227995,
            -2.818_877_685_363_913,
            4.634_051_057_602_465
        ]
    );

    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
        0.310141376504687,
        1.7025705860144955,
    ];
    level2::spmv('u', 8, 0.0, &fixtures::MSP8X8(), &x, -1, 1.0, &mut y, -1);
    approximately!(
        y,
        vec![
            0.702_116_727_828_979_5,
            2.507_111_072_540_283,
            -1.8900271654129028,
            -0.589_812_815_189_361_6,
            -1.7145023345947266,
            -0.42099788784980774,
            0.310_141_384_601_593,
            1.7025705575942993
        ]
    );

    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
        0.310141376504687,
        1.7025705860144955,
    ];
    level2::spmv('u', 8, 0.0, &fixtures::MSP8X8(), &x, -1, 0.0, &mut y, -1);
    assert_eq!(y, vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]);

    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
        0.310141376504687,
        1.7025705860144955,
    ];
    level2::spmv('l', 8, 1.0, &fixtures::MSP8X8(), &x, 1, 1.0, &mut y, 1);
    approximately!(
        y,
        vec![
            2.815_471_010_883_434,
            5.928_460_559_669_36,
            -4.886_691_958_386_224,
            -4.668_019_088_418_374,
            -1.164_358_782_734_471,
            -1.1286206109692598,
            -2.1048056242799813,
            1.059_516_723_859_344
        ]
    );

    let result = std::panic::catch_unwind(|| {
        level2::spmv('x', 8, 0.0, &[], &[], 1, 0.0, &mut [], 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::spmv('l', 8, 0.0, &[], &[], 0, 0.0, &mut [], 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::spmv('l', 8, 0.0, &[], &[], 1, 0.0, &mut [], 0)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::spmv('x', 8, 0.0, &[], &[], 0, 0.0, &mut [], 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::spmv('x', 8, 0.0, &[], &[], 1, 0.0, &mut [], 0)
    });
    assert!(result.is_err());
}

#[test]
fn spr() {
    let rand0_vector1x8 = vec![
        -0.08252376201716412,
        0.6060734308621007,
        -0.8874201453170976,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
        -1.1343309685168443,
        1.4623515387464268,
    ];
    let mut ap = fixtures::MSP8X8();
    level2::spr('u', 8, 1.0, &rand0_vector1x8, 1, &mut ap);
    approximately!(
        ap,
        vec![
            2.0315716098591032,
            -1.0957330579673474,
            -0.528_886_252_909_384_1,
            1.259_847_069_696_107_3E-2,
            -1.0392200605795914,
            1.7135771687065393,
            -1.4664069362184962,
            0.158_949_330_709_111,
            0.754_111_892_904_633_3,
            -1.6132508265122678,
            1.5470376352816384,
            -1.2616798170168568,
            -0.45775613390574854,
            -1.0378096626698443,
            0.531_063_122_436_607_1,
            -0.192_691_313_673_137_2,
            1.8751718610429435,
            -1.470_285_815_765_962,
            0.554_601_416_174_461_9,
            1.8911677011441483,
            4.219_651_554_518_577_5E-2,
            0.594_931_114_022_628_5,
            -1.7010275548546048,
            2.621_380_431_628_822,
            -0.11394076092473959,
            -3.305_175_586_509_158,
            -1.7314930842551917,
            2.8342736808954783,
            -0.22218220057011706,
            0.928_942_688_388_062_3,
            -2.8944382671379145,
            0.645_130_492_419_967_9,
            0.937_629_909_522_890_2,
            2.6787724346172013,
            -0.624_276_382_452_706,
            2.2202823972507417
        ]
    );

    let mut ap = fixtures::MSP8X8();
    level2::spr('l', 8, 1.0, &rand0_vector1x8, -1, &mut ap);
    approximately!(
        ap,
        vec![
            4.163_233_525_137_514,
            -2.7045082874362265,
            -9.134_270_248_301_846E-2,
            0.455_391_780_741_571_5,
            -0.347_215_168_504_943_6,
            -0.371_657_491_114_049_8,
            -0.571_414_727_139_043_1,
            -2.562_252_553_225_619E-2,
            2.1343717424570627,
            -2.248_692_719_760_868,
            1.1758816997533543,
            -1.5951304169961045,
            0.862_019_924_498_199,
            -1.7624980634300442,
            0.500_151_980_225_936_7,
            0.155_662_048_205_670_1,
            1.7358128436993852,
            -0.923_832_461_055_228_6,
            8.148_061_463_728_595E-3,
            2.0305267184877067,
            -0.306_156_846_333_621_5,
            0.625_842_256_233_299,
            -0.976_339_154_094_404_9,
            1.3016043732248743,
            0.21950983905450805,
            -2.934_019_650_980_874,
            -1.0960511910065915,
            1.4540138313430488,
            -3.761_034_432_874_988E-2,
            3.395_047_930_860_917E-2,
            -0.809_203_607_317_325_4,
            -4.687_439_965_467_988E-2,
            0.49483659947827974,
            2.2412288841908357,
            0.984_498_847_016_173_1,
            8.862_048_197_233_108E-2
        ]
    );

    let mut ap = fixtures::MSP8X8();
    let x = vec![1.0, 0.0, 2.0, 0.0, 3.0, 0.0, 4.0, 0.0];
    level2::spr('l', 8, 1.0, &x, -1, &mut ap);
    approximately!(
        ap,
        vec![
            2.024_761_438_369_751,
            -1.0457175970077515,
            -0.896_211_266_517_639_2,
            -6.063_477_694_988_251E-2,
            -0.501_378_297_805_786_1,
            0.926_062_703_132_629_4,
            -1.457_707_166_671_753,
            9.505_622_833_967_209E-2,
            16.847664952278137,
            -1.6243644952774048,
            13.576158165931702,
            -1.4755476713180542,
            7.855_391_785_502_434,
            -1.0750101804733276,
            4.406_542_718_410_492,
            -0.147_270_783_782_005_3,
            1.541_593_074_798_584,
            -0.981_855_690_479_278_6,
            0.496_578_186_750_412,
            1.6969479322433472,
            -0.260_736_316_442_489_6,
            9.501_321_852_207_184,
            -1.0135396718978882,
            7.614_752_292_633_057,
            5.641_984_753_310_68E-3,
            9.510_087_966_918_945E-2,
            -1.1071648597717285,
            1.5475668907165527,
            -0.10150344669818878,
            4.265_024_885_535_24E-2,
            2.4032819271087646,
            0.49096736311912537,
            2.421_603_351_831_436,
            1.8739038705825806,
            1.034_514_307_975_769,
            1.0818103104829788
        ]
    );

    let mut ap = fixtures::MSP8X8();
    level2::spr('u', 8, 1.0, &x, -1, &mut ap);
    approximately!(
        ap,
        vec![
            2.024_761_438_369_751,
            -1.0457175970077515,
            15.103_788_733_482_36,
            -6.063_477_694_988_251E-2,
            -0.501_378_297_805_786_1,
            0.926_062_703_132_629_4,
            -1.457_707_166_671_753,
            12.095056228339672,
            0.847_664_952_278_137_2,
            7.375_635_504_722_595,
            1.5761581659317017,
            -1.4755476713180542,
            -0.14460821449756622,
            -1.0750101804733276,
            0.40654271841049194,
            -0.147_270_783_782_005_3,
            9.541_593_074_798_584,
            -0.981_855_690_479_278_6,
            6.496_578_186_750_412,
            1.6969479322433472,
            3.7392636835575104,
            0.501_321_852_207_183_8,
            -1.0135396718978882,
            1.6147522926330566,
            5.641_984_753_310_68E-3,
            -2.9048991203308105,
            -1.1071648597717285,
            1.5475668907165527,
            -0.10150344669818878,
            4.042_650_248_855_352,
            -1.5967180728912354,
            3.4909673631191254,
            0.42160335183143616,
            3.8739038705825806,
            1.034_514_307_975_769,
            1.0818103104829788
        ]
    );

    let mut ap = fixtures::MSP8X8();
    let x = vec![];
    level2::spr('u', 8, 0.0, &x, -1, &mut ap);
    assert_eq!(ap, fixtures::MSP8X8());

    let result = std::panic::catch_unwind(|| level2::spr('x', 8, 1.0, &x, 1, &mut []));
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| level2::spr('l', 8, 1.0, &x, 0, &mut []));
    assert!(result.is_err());
}

#[test]
fn spr2() {
    let mut ap = fixtures::MSP8X8();
    let x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        -0.8874201453170976,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
        -1.1343309685168443,
        1.4623515387464268,
    ];
    let y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
        0.310141376504687,
        1.7025705860144955,
    ];

    level2::spr2('u', 8, 1.0, &x, 1, &y, 1, &mut ap);
    approximately!(
        ap,
        vec![
            1.9088788092259108,
            -0.827_079_537_523_602,
            2.1427755934692527,
            -0.527_735_132_106_009_5,
            -3.871_734_365_449_619,
            4.280_558_962_892_641,
            -1.3350154745463545,
            1.889_472_775_765_455E-3,
            1.1718274256446302,
            -1.7487222649705982,
            1.9654044311580279,
            -1.6299664624518897,
            0.709_933_281_713_407_6,
            -1.4638852889791973,
            -0.803_465_547_339_669_7,
            0.273_911_919_200_314_1,
            2.666_334_681_463_736,
            -1.648_512_065_105_992,
            0.12756695855303168,
            0.604_737_846_800_916_6,
            -0.724_165_186_197_936_4,
            -0.32070494348856116,
            -3.6694649960841836,
            3.4834429703160943,
            0.707_380_472_926_096_6,
            -0.850_645_011_134_398_4,
            -0.458_914_156_265_713_3,
            0.843_960_924_330_161_8,
            0.784_735_516_468_948_9,
            4.7408108315515065,
            -5.871_497_612_672_208,
            -0.19205897856395726,
            -1.4848080996234678,
            2.195_340_453_118_895,
            -0.44322849686470533,
            5.061_323_734_317_227
        ]
    );

    let mut ap = fixtures::MSP8X8();
    let x = vec![1.0, 2.0, 0.0, 4.0, 0.0, 6.0, 7.0, 8.0];
    let y = vec![9.0, 12.0, 13.0, 14.0, 0.0, 16.0, 17.0, 18.0];
    level2::spr2('l', 8, 0.25, &x, -1, &y, -1, &mut ap);
    approximately!(
        ap,
        vec![
            74.024_761_438_369_75,
            64.454_282_402_992_25,
            58.103_788_733_482_36,
            -6.063_477_694_988_251E-2,
            45.498621702194214,
            26.926_062_703_132_63,
            31.542292833328247,
            22.595056228339672,
            60.347_664_952_278_14,
            51.875635504722595,
            1.5761581659317017,
            40.024452328681946,
            22.605391785502434,
            28.424989819526672,
            20.406542718410492,
            47.852729216217995,
            1.541_593_074_798_584,
            36.018_144_309_520_72,
            19.996578186750412,
            27.696947932243347,
            17.239_263_683_557_51,
            0.501_321_852_207_183_8,
            -1.0135396718978882,
            1.6147522926330566,
            5.641_984_753_310_68E-3,
            -2.9048991203308105,
            26.892_835_140_228_27,
            14.547566890716553,
            18.898_496_553_301_81,
            12.542650248855352,
            -1.5967180728912354,
            6.990_967_363_119_125,
            3.671_603_351_831_436,
            13.873_903_870_582_58,
            8.534_514_307_975_769,
            4.581_810_310_482_979
        ]
    );

    let mut ap = fixtures::MSP8X8();
    level2::spr2('u', 8, 0.25, &x, -1, &y, -1, &mut ap);
    approximately!(
        ap,
        vec![
            74.024_761_438_369_75,
            64.454_282_402_992_25,
            58.603_788_733_482_36,
            58.939_365_223_050_12,
            52.998621702194214,
            48.926_062_703_132_63,
            -1.457_707_166_671_753,
            9.505_622_833_967_209E-2,
            0.847_664_952_278_137_2,
            -1.6243644952774048,
            47.576_158_165_931_7,
            40.024452328681946,
            36.855391785502434,
            -1.0750101804733276,
            28.406542718410492,
            25.852729216217995,
            24.291593074798584,
            18.518_144_309_520_72,
            0.496_578_186_750_412,
            14.696947932243347,
            -0.260_736_316_442_489_6,
            33.501321852207184,
            28.486460328102112,
            27.614752292633057,
            5.641_984_753_310_68E-3,
            16.095_100_879_669_19,
            5.3928351402282715,
            13.547566890716553,
            22.398_496_553_301_81,
            20.042650248855352,
            15.903281927108765,
            0.49096736311912537,
            12.921603351831436,
            5.123_903_870_582_581,
            8.534_514_307_975_769,
            4.581810310482978
        ]
    );

    let mut ap = fixtures::MSP8X8();
    level2::spr2('u', 8, 0.0, &x, -1, &y, -1, &mut ap);
    assert_eq!(ap, fixtures::MSP8X8());

    let result =
        std::panic::catch_unwind(|| level2::spr2('x', 8, 1.0, &[], 1, &[], 1, &mut []));
    assert!(result.is_err());

    let result =
        std::panic::catch_unwind(|| level2::spr2('l', 8, 1.0, &[], 0, &[], 1, &mut []));
    assert!(result.is_err());

    let result =
        std::panic::catch_unwind(|| level2::spr2('l', 8, 1.0, &[], 1, &[], 0, &mut []));
    assert!(result.is_err());
}

#[test]
fn symv() {
    let a = fixtures::M6X6U();
    let x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        -0.8874201453170976,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
    ];
    level2::symv('u', 6, 1.0, &a, 6, &x, 1, 1.0, &mut y, 1);
    approximately!(
        y,
        vec![
            -0.34473174217488856,
            2.655_158_156_250_757,
            -2.9788880265441096,
            0.772_155_782_034_766_4,
            -2.3181438495981777,
            -0.19616499922182973
        ]
    );

    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
    ];
    level2::symv('u', 6, 0.0, &a, 6, &x, -1, 0.35, &mut y, -1);
    approximately!(
        y,
        vec![
            0.245_740_850_555_201,
            0.877_488_860_445_552_6,
            -0.661_509_496_629_076_2,
            -0.20643448180071822,
            -0.600_075_806_888_924,
            -0.14734925823808975
        ]
    );

    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
    ];
    level2::symv('u', 6, 0.5, &a, 6, &x, -1, 0.0, &mut y, -1);
    approximately!(
        y,
        vec![
            -1.0601889945486187,
            -0.25310583298255546,
            0.23215355215989741,
            0.31792263624047945,
            -0.23418812548426216,
            0.526_597_319_731_696_1
        ]
    );

    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
    ];
    level2::symv('l', 6, 0.5, &a, 6, &x, -1, 0.0, &mut y, -1);
    approximately!(
        y,
        vec![
            -6.066_557_204_956_524E-2,
            -0.329_250_313_661_333_4,
            0.546_520_828_191_930_3,
            -1.962_700_495_036_981_4E-4,
            -0.18855719168536922,
            0.289_988_732_718_185_8
        ]
    );

    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
    ];
    level2::symv('l', 6, 0.0, &a, 6, &x, -1, 1.0, &mut y, -1);
    approximately!(
        y,
        vec![
            0.702_116_727_828_979_5,
            2.507_111_072_540_283,
            -1.8900271654129028,
            -0.589_812_815_189_361_6,
            -1.7145023345947266,
            -0.42099788784980774
        ]
    );
    let a = vec![];
    let result = std::panic::catch_unwind(|| {
        level2::symv('x', 6, 0.5, &a, 6, &[], -1, 1.0, &mut [], -1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::symv('l', 7, 0.5, &a, 6, &[], -1, 1.0, &mut [], -1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::symv('l', 7, 0.5, &a, 7, &[], 0, 1.0, &mut [], -1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::symv('l', 7, 0.5, &a, 7, &[], 4, 1.0, &mut [], 0)
    });
    assert!(result.is_err());
}

#[test]
fn syr() {
    let mut a = fixtures::M6X6U();
    let x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        -0.8874201453170976,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];

    level2::syr('u', 6, 1.0, &x, 1, &mut a, 6);
    approximately!(
        a,
        vec![
            1.0605610441013518,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.147_668_797_262_984,
            -0.701_367_670_565_328_9,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.33587870086148897,
            -1.770_742_978_327_089,
            0.783_790_931_749_823_7,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            -0.982_702_309_658_285,
            0.753_265_820_703_636_9,
            -1.0493921568733513,
            -1.2205934273347165,
            0.0000000000000000,
            0.0000000000000000,
            -0.939_801_241_919_441_9,
            0.955_144_178_096_516,
            -0.24463638865123194,
            -0.286_550_246_328_062_7,
            -0.961_982_624_843_513_7,
            0.0000000000000000,
            -0.813_210_728_217_242_7,
            -0.786_141_315_112_146_8,
            -0.936_604_363_491_639_4,
            0.529_759_600_941_231_3,
            -0.986_270_963_292_192,
            1.7731898758261764
        ]
    );

    let mut a = fixtures::M6X6U();
    level2::syr('l', 6, 1.0, &x, -1, &mut a, 6);
    approximately!(
        a,
        vec![
            1.356_683_704_599_675,
            0.19421976890080117,
            5.802_322_942_404_991_6E-2,
            -0.488_430_125_286_683_4,
            0.33357878624435955,
            -4.542_052_989_113_188E-2,
            0.19768425822257996,
            -0.944_172_280_147_468_8,
            3.720_051_780_348_332_4E-2,
            -0.313_147_919_408_182_3,
            0.21386785430119737,
            -2.912_053_065_006_326E-2,
            0.262_645_453_214_645_4,
            -1.2329012155532837,
            7.390_134_941_050_841E-3,
            -9.355_305_937_350_389E-2,
            6.389_310_236_943_89E-2,
            -8.699_769_546_743_23E-3,
            -0.974_002_540_111_541_7,
            0.689_372_718_334_198,
            -0.955_839_097_499_847_4,
            -0.444_192_630_525_943_6,
            -0.537_841_762_773_805_2,
            7.323_324_764_684_358E-2,
            -0.910_680_711_269_378_7,
            0.741_276_323_795_318_6,
            6.851_153_075_695_038E-2,
            -0.323_750_764_131_546,
            -0.719_178_015_261_373_8,
            -5.001_546_095_959_597E-2,
            -0.767_790_198_326_110_8,
            -1.1197201013565063,
            -0.44817423820495605,
            0.471_736_371_517_181_4,
            -1.1804907321929932,
            1.4770672153278532
        ]
    );

    let mut a = fixtures::M6X6U();
    let x = vec![
        -0.08252376201716412,
        0.0, // 0.6060734308621007,
        -0.8874201453170976,
        0.0, // 0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];

    level2::syr('l', 6, 1.5, &x, 1, &mut a, 6);
    approximately!(
        a,
        vec![
            1.063_966_129_846_028,
            0.0000000000000000,
            0.10984987147026537,
            0.0000000000000000,
            -4.368_079_597_509_489E-2,
            -6.813_079_483_669_782E-2,
            0.19768425822257996,
            -1.068_692_684_173_584,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.262_645_453_214_645_4,
            -1.2329012155532837,
            1.1775481645367787,
            0.0000000000000000,
            -0.469_721_879_112_273_5,
            -0.732_645_187_930_025_1,
            -0.974_002_540_111_541_7,
            0.689_372_718_334_198,
            -0.955_839_097_499_847_4,
            -1.2317070960998535,
            0.0000000000000000,
            0.0000000000000000,
            -0.910_680_711_269_378_7,
            0.741_276_323_795_318_6,
            6.851_153_075_695_038E-2,
            -0.323_750_764_131_546,
            -0.899_722_422_830_456_1,
            0.29132965335120176,
            -0.767_790_198_326_110_8,
            -1.1197201013565063,
            -0.44817423820495605,
            0.471_736_371_517_181_4,
            -1.1804907321929932,
            1.924_656_291_820_014
        ]
    );

    let mut a = fixtures::M6X6U();
    level2::syr('u', 6, 1.5, &x, 1, &mut a, 6);
    approximately!(
        a,
        vec![
            1.063_966_129_846_028,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.19768425822257996,
            -1.068_692_684_173_584,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.37249532468491076,
            -1.2329012155532837,
            1.1775481645367787,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            -0.974_002_540_111_541_7,
            0.689_372_718_334_198,
            -0.955_839_097_499_847_4,
            -1.2317070960998535,
            0.0000000000000000,
            0.0000000000000000,
            -0.954_361_507_244_473_6,
            0.741_276_323_795_318_6,
            -0.401_210_348_355_323_1,
            -0.323_750_764_131_546,
            -0.899_722_422_830_456_1,
            0.0000000000000000,
            -0.835_920_993_162_808_7,
            -1.1197201013565063,
            -1.1808194261349811,
            0.471_736_371_517_181_4,
            -0.889_161_078_841_791_4,
            1.924_656_291_820_014
        ]
    );

    let mut a = fixtures::M6X6U();
    level2::syr('u', 6, 0.0, &x, 1, &mut a, 6);
    assert_eq!(a, fixtures::M6X6U());

    let result = std::panic::catch_unwind(|| level2::syr('x', 6, 1.0, &[], 1, &mut [], 6));
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| level2::syr('l', 0, 1.0, &[], 0, &mut [], 6));
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| level2::syr('l', 10, 1.0, &[], 2, &mut [], 6));
    assert!(result.is_err());
}

#[test]
fn syr2() {
    let mut a = fixtures::M6X6U();
    let x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        -0.8874201453170976,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    let y = vec![
        -7.799_595_819_786_191,
        -0.909_877_403_639_257,
        -1.3999755270779133,
        14.987_896_066_159_01,
        6.220_292_953_774_333,
        11.557443037629128,
    ];

    level2::syr2('u', 6, 1.0, &x, 1, &y, 1, &mut a, 6);
    approximately!(
        a,
        vec![
            2.3410548415528245,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            -4.454357029167,
            -2.171597750629876,
            0.0,
            0.0,
            0.0,
            0.0,
            7.299695161698482,
            -1.2739456326320604,
            2.4810094375675433,
            0.0,
            0.0,
            0.0,
            -3.0331043634855632,
            9.677217747189504,
            -14.403987374606984,
            1.9283826203341967,
            0.0,
            0.0,
            -4.176280924891648,
            4.190158087127983,
            -5.945517370452567,
            5.620847106509339,
            3.3034621529058006,
            0.0,
            -6.014399601339204,
            5.384148612710827,
            -11.475019248653608,
            9.939376538593871,
            6.321443871329548,
            14.1925367743503
        ]
    );

    let mut a = fixtures::M6X6U();
    level2::syr2('l', 6, 1.0, &x, -1, &y, -1, &mut a, 6);
    approximately!(
        a,
        vec![
            13.776029881910745,
            7.501_934_542_184_216,
            9.467_639_796_595_47,
            -11.026844348544614,
            6.503_868_548_886_231,
            -5.246_609_285_715_92,
            0.19768425822257996,
            3.321_272_758_288_501,
            5.944_598_027_866_206,
            -6.014_028_837_893_683,
            3.4488818699418466,
            -3.265_600_373_453_225,
            0.262_645_453_214_645_4,
            -1.2329012155532837,
            3.1563660177640145,
            -13.448147766702762,
            8.987_845_113_797_647,
            -2.059_101_785_303_646,
            -0.974_002_540_111_541_7,
            0.689_372_718_334_198,
            -0.955_839_097_499_847_4,
            1.2530258182029286,
            -4.104_446_233_380_798_5E-2,
            7.037_049_502_963_569,
            -0.910_680_711_269_378_7,
            0.741_276_323_795_318_6,
            6.851_153_075_695_038E-2,
            -0.323_750_764_131_546,
            -2.1894081024656344,
            -4.652_041_361_468_697,
            -0.767_790_198_326_110_8,
            -1.1197201013565063,
            -0.44817423820495605,
            0.471_736_371_517_181_4,
            -1.1804907321929932,
            2.7575610426505364,
        ]
    );

    let mut a = fixtures::M6X6U();
    let y = vec![
        0.0,
        0.0,
        -1.3999755270779133,
        0.0,
        6.220_292_953_774_333,
        11.557443037629128,
    ];
    let x = vec![
        -0.08252376201716412,
        0.0,
        -0.8874201453170976,
        0.10542139019376515,
        0.0,
        0.5503933584550523,
    ];
    level2::syr2('l', 6, 1.0, &x, -1, &y, -1, &mut a, 6);
    approximately!(
        a,
        vec![
            13.776029881910745,
            3.4236078833259853,
            1.2184016319884208,
            -11.026844348544614,
            0.0000000000000000,
            -0.953_763_661_458_594_9,
            0.19768425822257996,
            -1.068_692_684_173_584,
            0.655_751_918_234_770_4,
            -5.520_013_187_125_983,
            0.0000000000000000,
            -0.513_321_990_158_033_3,
            0.262_645_453_214_645_4,
            -1.2329012155532837,
            -3.723_533_824_086_189_3E-3,
            -0.14758736253159732,
            0.0000000000000000,
            0.0000000000000000,
            -0.974_002_540_111_541_7,
            0.689_372_718_334_198,
            -0.955_839_097_499_847_4,
            1.2530258182029286,
            0.0000000000000000,
            0.115_531_249_776_339,
            -0.910_680_711_269_378_7,
            0.741_276_323_795_318_6,
            6.851_153_075_695_038E-2,
            -0.323_750_764_131_546,
            -1.086_503_028_869_629,
            0.0000000000000000,
            -0.767_790_198_326_110_8,
            -1.1197201013565063,
            -0.44817423820495605,
            0.471_736_371_517_181_4,
            -1.1804907321929932,
            1.470_257_043_838_501,
        ]
    );

    let mut a = fixtures::M6X6U();
    level2::syr2('u', 6, 1.0, &x, -1, &y, -1, &mut a, 6);
    approximately!(
        a,
        vec![
            13.776029881910745,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            3.6212921415485653,
            -1.068_692_684_173_584,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            1.4810470852030662,
            -0.577_149_297_318_513_3,
            -3.723_533_824_086_189_3E-3,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            -12.000846888656156,
            -4.830_640_468_791_785,
            -1.1034264600314447,
            1.2530258182029286,
            0.0000000000000000,
            0.0000000000000000,
            -0.910_680_711_269_378_7,
            0.741_276_323_795_318_6,
            6.851_153_075_695_038E-2,
            -0.323_750_764_131_546,
            -1.086_503_028_869_629,
            0.0000000000000000,
            -1.7215538597847058,
            -1.6330420915145396,
            -0.44817423820495605,
            0.587_267_621_293_520_4,
            -1.1804907321929932,
            1.470_257_043_838_501
        ]
    );

    let mut a = fixtures::M6X6U();
    level2::syr2('u', 0, 1.0, &x, -1, &y, -1, &mut a, 6);
    assert_eq!(a, fixtures::M6X6U().to_vec());

    let result = std::panic::catch_unwind(|| {
        level2::syr2('x', 6, 1.0, &[], -1, &[], -1, &mut [], 6)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::syr2('l', 0, 1.0, &[], 0, &[], 1, &mut [], 6)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::syr2('l', 0, 1.0, &[], 1, &[], 0, &mut [], 6)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::syr2('l', 10, 1.0, &[], 1, &[], 1, &mut [], 6)
    });
    assert!(result.is_err());
}

#[test]
fn tbmv() {
    let a = fixtures::M6X6UB();
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbmv('u', 'n', 'n', 6, 5, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            -0.813_771_610_958_028_6,
            -0.929_740_609_389_552_4,
            -0.323_262_028_967_739_9,
            1.554_890_347_648_996_1E-2,
            -1.0331334400689514,
            0.809_219_689_386_111_4
        ],
        1E-6
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbmv('u', 'n', 'u', 6, 5, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            -0.809_335_886_675_889_5,
            0.32403908019249394,
            -0.323_262_028_967_739_9,
            0.250_818_560_164_391_1,
            -0.29685975280045795,
            0.550_393_342_971_801_8
        ],
        1E-6
    );

    let a = fixtures::M6X6LB();
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbmv('l', 'n', 'n', 6, 5, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            -0.10422373620238545,
            -0.15170022700843333,
            -0.11323537222660232,
            1.392_176_417_621_317,
            -1.066_988_935_310_364_5E-2,
            0.378_095_975_084_189_8
        ],
        1E-6
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbmv('l', 'n', 'u', 6, 5, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            -8.252_376_317_977_905E-2,
            0.632_995_443_431_427_8,
            -0.11323537222660232,
            1.4578122305173125,
            0.795_506_919_575_408_8,
            0.29448476712661564
        ],
        1E-6
    );

    let a = fixtures::M6X6UB();
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbmv('u', 't', 'n', 6, 5, &a, 6, &mut x, -1);
    approximately!(
        x,
        vec![
            -1.7017496426889362,
            -0.890_933_144_845_815_6,
            -0.393_588_352_422_356,
            -0.29089361583507095,
            -0.26831028363471177,
            0.579_977_465_436_371_6
        ],
        1E-6
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbmv('u', 't', 'u', 6, 5, &a, 6, &mut x, -1);
    approximately!(
        x,
        vec![
            -1.6629422617695848,
            0.373_640_921_598_097_5,
            -0.393_588_352_422_356,
            -0.18507968907691819,
            0.461_678_587_374_500_2,
            0.550_393_342_971_801_8
        ],
        1E-6
    );

    let a = fixtures::M6X6LB();
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbmv('l', 't', 'n', 6, 5, &a, 6, &mut x, -1);
    approximately!(
        x,
        vec![
            -9.506_009_126_727_122E-2,
            -0.782_417_537_652_681_8,
            1.444_688_531_743_31E-2,
            0.19492695522830172,
            0.424_123_642_665_311_3,
            1.0985770939826143
        ],
        1E-6
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbmv('l', 't', 'u', 6, 5, &a, 6, &mut x, -1);
    approximately!(
        x,
        vec![
            -8.252_376_317_977_905E-2,
            0.602_217_419_657_345_1,
            1.444_688_531_743_31E-2,
            0.331_892_013_498_640_3,
            0.880_997_454_954_584_3,
            0.953_848_833_490_043_9
        ],
        1E-6
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbmv('l', 't', 'u', 0, 5, &a, 6, &mut x, -1);
    approximately!(
        x,
        vec![
            -8.252_376_317_977_905E-2,
            0.606_073_439_121_246_3,
            0.0000000000000000,
            0.10542138665914536,
            0.352_874_487_638_473_5,
            0.550_393_342_971_801_8
        ],
        1E-6
    );

    let result = std::panic::catch_unwind(|| {
        level2::tbmv('x', 'n', 'n', 6, 5, &[0.0], 6, &mut [], 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tbmv('l', 'x', 'n', 6, 5, &[0.0], 6, &mut [], 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tbmv('l', 't', 'x', 6, 5, &[0.0], 6, &mut [], 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tbmv('l', 't', 'n', 6, 5, &[0.0], 4, &mut [], 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tbmv('l', 't', 'n', 6, 5, &[0.0], 6, &mut [], 0)
    });
    assert!(result.is_err());
}

#[test]
fn tbsv() {
    let a = fixtures::M6X6UB();
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbsv('u', 'n', 'n', 6, 5, &a, 6, &mut x, -1);
    approximately!(
        x,
        vec![
            -5.612_879_973_989_351E-2,
            -0.496_836_085_013_766_3,
            0.10909498392102078,
            -58.702879203847615,
            67.177_160_026_230_82,
            2.1819912816492972
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.0, /*0.5503933584550523*/
    ];
    level2::tbsv('u', 'n', 'u', 6, 5, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            0.32054266536864856,
            0.42212354015418174,
            0.185_788_205_796_801,
            0.21966477167462894,
            0.352_874_487_638_473_5,
            0.0000000000000000
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbsv('u', 't', 'n', 6, 5, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            -7.831_430_115_471_424E-2,
            -0.581_603_067_802_304_4,
            187.05086808602871,
            -145.50587380040002,
            54.496024225473036,
            147.35034084184912
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbsv('u', 't', 'u', 6, 5, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            -8.252_376_317_977_905E-2,
            0.622_387_088_031_176_8,
            0.789_016_288_559_637_6,
            0.350_158_970_139_842_2,
            -0.12433160387523684,
            1.2255934857017796
        ],
        1E-5
    );

    let a = fixtures::M6X6LB();
    let mut x = vec![
        0.0, /*-0.08252376201716412*/
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbsv('l', 'n', 'n', 6, 5, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            0.0000000000000000,
            -2.0564350299322176,
            3.963_642_067_237_184_4E-2,
            13.425553198426545,
            -9.578_323_479_114_12E-2,
            -10.286880273121177
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbsv('l', 'n', 'u', 6, 5, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            -8.252_376_317_977_905E-2,
            0.579_151_434_811_064_9,
            0.11308010837917339,
            -1.1356976816938495,
            6.776_437_043_701_22E-2,
            1.8970665540252198
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbsv('l', 't', 'n', 6, 5, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            -0.35540515552701807,
            -9.290_159_741_613_948,
            -0.750_121_328_651_904,
            -0.647_907_987_347_179_2,
            -0.25731628521585004,
            0.47780860806694775
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbsv('l', 't', 'u', 6, 5, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            1.3381974790667357,
            1.7132221723919971,
            0.25167885419044456,
            -0.38082104951807116,
            0.327_156_714_217_532_7,
            0.550_393_342_971_801_8
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbsv('l', 't', 'u', 0, 5, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            -0.08252376201716412,
            0.6060734308621007,
            0.0,
            0.10542139019376515,
            0.3528744733184766,
            0.5503933584550523
        ],
        1E-5
    );

    let result = std::panic::catch_unwind(|| {
        level2::tbsv('x', 'n', 'n', 6, 5, &[0.0], 6, &mut [], 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tbsv('l', 'x', 'n', 6, 5, &[0.0], 6, &mut [], 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tbsv('l', 't', 'x', 6, 5, &[0.0], 6, &mut [], 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tbsv('l', 't', 'n', 6, 5, &[0.0], 4, &mut [], 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tbsv('l', 't', 'n', 6, 5, &[0.0], 6, &mut [], 0)
    });
    assert!(result.is_err());
}

#[test]
fn tpsv() {
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.0, /*0.5503933584550523*/
    ];
    level2::tpsv('u', 'n', 'n', 6, &fixtures::M6X6PU(), &mut x, 1);
    approximately!(
        x,
        vec![
            -1.625_587_889_173_527_7E-2,
            6.035_708_769_682_844,
            -5.9188003332057875,
            -2.221_334_742_661_228_8E-4,
            -0.32478003122144583,
            0.0000000000000000
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpsv('u', 'n', 'u', 6, &fixtures::M6X6PU(), &mut x, -1);
    approximately!(
        x,
        vec![
            -8.252_376_317_977_905E-2,
            0.508_654_901_501_827_8,
            0.20360687364684518,
            0.22820304638469158,
            2.440_792_502_394_156_8E-2,
            1.0838066709841392
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpsv('u', 't', 'n', 6, &fixtures::M6X6PU(), &mut x, 1);
    approximately!(
        x,
        vec![
            -7.831_430_115_471_424E-2,
            -0.581_603_067_802_304_4,
            187.05086808602871,
            -145.50587380040002,
            54.496024225473036,
            147.35034084184912
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpsv('u', 't', 'u', 6, &fixtures::M6X6PU(), &mut x, 1);
    approximately!(
        x,
        vec![
            -8.252_376_317_977_905E-2,
            0.622_387_088_031_176_8,
            0.789_016_288_559_637_6,
            0.350_158_970_139_842_2,
            -0.12433160387523684,
            1.2255934857017796
        ],
        1E-5
    );

    let ap = vec![
        1.4702569970829857,
        -1.180490682884277,
        0.47173637445323024,
        -0.4481742366033955,
        -1.1197200611269833,
        -0.767790184730859,
        -1.0865030469936974,
        -0.3237507545879617,
        0.06851153327714439,
        0.7412763052602079,
        -0.9106806824932887,
        -1.2317070584140966,
        -0.955839103276798,
        0.6893726977654734,
        -0.9740025611125269,
        -0.00372353379218051,
        -1.2329011995712644,
        0.2626454586627623,
        -1.068692711254786,
        0.197684262345795,
        1.053750863028617,
    ];
    let mut x = vec![
        0.0, /* -0.08252376201716412 */
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpsv('l', 'n', 'n', 6, &ap, &mut x, 1);
    approximately!(
        x,
        vec![
            0.0000000000000000,
            -0.557_820_294_115_323_6,
            0.14662150363488616,
            -76.213_910_766_438_05,
            87.301_923_188_598_41,
            2.794_045_691_286_22
        ],
        1E-5
    );

    let ap = vec![
        1.2629542848807933,
        -0.3262333607056494,
        1.3297992629225006,
        1.2724293214294047,
        0.4146414344564082,
        -1.5399500419037095,
        -0.2947204467905602,
        -0.005767172747536955,
        2.404653388857951,
        0.7635934611404596,
        -0.7990092489893682,
        -0.29921511789731614,
        -0.411510832795067,
        0.2522234481561323,
        -0.8919211272845686,
        0.37739564598170106,
        0.1333363608148414,
        0.8041895097449078,
        -1.2845993538721883,
        0.04672617218835198,
        1.1519117540872,
    ];
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpsv('l', 'n', 'u', 6, &ap, &mut x, 1);
    approximately!(
        x,
        vec![
            -8.252_376_317_977_905E-2,
            0.579_151_434_811_064_9,
            0.11308010837917339,
            -1.1356976816938495,
            6.776_437_043_701_22E-2,
            1.8970665540252198
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpsv('l', 't', 'n', 6, &ap, &mut x, 1);
    approximately!(
        x,
        vec![
            -0.35540515552701807,
            -9.290_159_741_613_948,
            -0.750_121_328_651_904,
            -0.647_907_987_347_179_2,
            -0.25731628521585004,
            0.47780860806694775
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpsv('l', 't', 'u', 6, &ap, &mut x, 1);
    approximately!(
        x,
        vec![
            1.3381974790667357,
            1.7132221723919971,
            0.25167885419044456,
            -0.38082104951807116,
            0.327_156_714_217_532_7,
            0.550_393_342_971_801_8
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpsv('l', 't', 'u', 0, &ap, &mut x, 1);
    approximately!(
        x,
        vec![
            -0.08252376201716412,
            0.6060734308621007,
            0.0,
            0.10542139019376515,
            0.3528744733184766,
            0.5503933584550523
        ],
        1E-5
    );

    let result =
        std::panic::catch_unwind(|| level2::tpsv('x', 'n', 'n', 6, &[], &mut [0.0], 1));
    assert!(result.is_err());

    let result =
        std::panic::catch_unwind(|| level2::tpsv('l', 'x', 'n', 6, &[], &mut [0.0], 1));
    assert!(result.is_err());

    let result =
        std::panic::catch_unwind(|| level2::tpsv('l', 't', 'x', 6, &[], &mut [0.0], 1));
    assert!(result.is_err());

    let result =
        std::panic::catch_unwind(|| level2::tpsv('l', 't', 'n', 6, &[], &mut [0.0], 0));
    assert!(result.is_err());
}

#[test]
fn tpmv() {
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpmv('u', 'n', 'n', 6, &fixtures::M6X6PU(), &mut x, 1);
    approximately!(
        x,
        vec![
            -0.813_771_610_958_028_6,
            -0.929_740_609_389_552_4,
            -0.323_262_028_967_739_9,
            1.554_890_347_648_996_1E-2,
            -1.0331334400689514,
            0.809_219_689_386_111_4,
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpmv('u', 'n', 'u', 6, &fixtures::M6X6PU(), &mut x, 1);
    approximately!(
        x,
        vec![
            -0.809_335_886_675_889_5,
            0.32403908019249394,
            -0.323_262_028_967_739_9,
            0.250_818_560_164_391_1,
            -0.29685975280045795,
            0.550_393_342_971_801_8
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpmv('l', 'n', 'n', 6, &fixtures::M6X6PL(), &mut x, 1);
    approximately!(
        x,
        vec![
            -0.10422373620238545,
            -0.15170022700843333,
            -0.11323537222660232,
            1.392_176_417_621_317,
            -1.066_988_935_310_364_5E-2,
            0.378_095_975_084_189_8
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpmv('l', 'n', 'u', 6, &fixtures::M6X6PL(), &mut x, 1);
    approximately!(
        x,
        vec![
            -8.252_376_317_977_905E-2,
            0.632_995_443_431_427_8,
            -0.11323537222660232,
            1.4578122305173125,
            0.795_506_919_575_408_8,
            0.29448476712661564
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpmv('u', 't', 'n', 6, &fixtures::M6X6PU(), &mut x, -1);
    approximately!(
        x,
        vec![
            -1.7017496426889362,
            -0.890_933_144_845_815_6,
            -0.393_588_352_422_356,
            -0.29089361583507095,
            -0.26831028363471177,
            0.579_977_465_436_371_6
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpmv('u', 't', 'u', 6, &fixtures::M6X6PU(), &mut x, -1);
    approximately!(
        x,
        vec![
            -1.6629422617695848,
            0.373_640_921_598_097_5,
            -0.393_588_352_422_356,
            -0.18507968907691819,
            0.461_678_587_374_500_2,
            0.550_393_342_971_801_8
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpmv('l', 't', 'n', 6, &fixtures::M6X6PL(), &mut x, -1);
    approximately!(
        x,
        vec![
            -9.506_009_126_727_122E-2,
            -0.782_417_537_652_681_8,
            1.444_688_531_743_31E-2,
            0.19492695522830172,
            0.424_123_642_665_311_3,
            1.0985770939826143
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpmv('l', 't', 'u', 6, &fixtures::M6X6PL(), &mut x, -1);
    approximately!(
        x,
        vec![
            -8.252_376_317_977_905E-2,
            0.602_217_419_657_345_1,
            1.444_688_531_743_31E-2,
            0.331_892_013_498_640_3,
            0.880_997_454_954_584_3,
            0.953_848_833_490_043_9
        ],
        1E-5
    );

    // matrix_6x6_matrix::lower_band.filter(f => f)
    let ap = vec![
        1.2629542848807933,
        -0.3262333607056494,
        1.3297992629225006,
        1.2724293214294047,
        0.4146414344564082,
        -1.5399500419037095,
        -0.2947204467905602,
        -0.005767172747536955,
        2.404653388857951,
        0.7635934611404596,
        -0.7990092489893682,
        -0.29921511789731614,
        -0.411510832795067,
        0.2522234481561323,
        -0.8919211272845686,
        0.37739564598170106,
        0.1333363608148414,
        0.8041895097449078,
        -1.2845993538721883,
        0.04672617218835198,
        1.1519117540872,
    ];
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpmv('l', 't', 'u', 0, &ap, &mut x, 1);
    approximately!(
        x,
        vec![
            -0.08252376201716412,
            0.6060734308621007,
            0.0,
            0.10542139019376515,
            0.3528744733184766,
            0.5503933584550523
        ],
        1E-5
    );

    let result =
        std::panic::catch_unwind(|| level2::tpmv('x', 'n', 'n', 6, &[], &mut [0.0], 1));
    assert!(result.is_err());

    let result =
        std::panic::catch_unwind(|| level2::tpmv('l', 'x', 'n', 6, &[], &mut [0.0], 1));
    assert!(result.is_err());

    let result =
        std::panic::catch_unwind(|| level2::tpmv('l', 't', 'x', 6, &[], &mut [0.0], 1));
    assert!(result.is_err());

    let result =
        std::panic::catch_unwind(|| level2::tpmv('l', 't', 'n', 6, &[], &mut [0.0], 0));
    assert!(result.is_err());
}

#[test]
fn trmv() {
    let a = fixtures::M6X6U();
    let mut x = vec![
        0.0,
        0.6060734308621007,
        -0.8874201453170976,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trmv('u', 'n', 'n', 6, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            -0.959_888_982_541_949_9,
            0.16436073262040418,
            -0.319_957_690_142_732,
            1.554_890_347_648_996_1E-2,
            -1.0331334400689514,
            0.809_219_689_386_111_4
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trmv('u', 'n', 'u', 6, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            -0.809_335_886_675_889_5,
            0.32403908019249394,
            -0.323_262_028_967_739_9,
            0.250_818_560_164_391_1,
            -0.29685975280045795,
            0.550_393_342_971_801_8
        ],
        1E-5
    );

    let a = fixtures::M6X6L();
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trmv('l', 'n', 'n', 6, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            -0.10422373620238545,
            -0.15170022700843333,
            -0.11323537222660232,
            1.392_176_417_621_317,
            -1.066_988_935_310_364_5E-2,
            0.378_095_975_084_189_8
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trmv('l', 'n', 'u', 6, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            -8.252_376_317_977_905E-2,
            0.632_995_443_431_427_8,
            -0.11323537222660232,
            1.4578122305173125,
            0.795_506_919_575_408_8,
            0.29448476712661564
        ],
        1E-5
    );

    let a = fixtures::M6X6U();
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trmv('u', 't', 'n', 6, &a, 6, &mut x, -1);
    approximately!(
        x,
        vec![
            -1.7017496426889362,
            -0.890_933_144_845_815_6,
            -0.393_588_352_422_356,
            -0.29089361583507095,
            -0.26831028363471177,
            0.579_977_465_436_371_6
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trmv('u', 't', 'u', 6, &a, 6, &mut x, -1);
    approximately!(
        x,
        vec![
            -1.6629422617695848,
            0.373_640_921_598_097_5,
            -0.393_588_352_422_356,
            -0.18507968907691819,
            0.461_678_587_374_500_2,
            0.550_393_342_971_801_8
        ],
        1E-5
    );

    let a = fixtures::M6X6L();
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trmv('l', 't', 'n', 6, &a, 6, &mut x, -1);
    approximately!(
        x,
        vec![
            -9.506_009_126_727_122E-2,
            -0.782_417_537_652_681_8,
            1.444_688_531_743_31E-2,
            0.19492695522830172,
            0.424_123_642_665_311_3,
            1.0985770939826143
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trmv('l', 't', 'u', 6, &a, 6, &mut x, -1);
    approximately!(
        x,
        vec![
            -8.252_376_317_977_905E-2,
            0.602_217_419_657_345_1,
            1.444_688_531_743_31E-2,
            0.331_892_013_498_640_3,
            0.880_997_454_954_584_3,
            0.953_848_833_490_043_9
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trmv('l', 't', 'u', 0, &a, 6, &mut x, -1);
    approximately!(
        x,
        vec![
            -0.08252376201716412,
            0.6060734308621007,
            0.0,
            0.10542139019376515,
            0.3528744733184766,
            0.5503933584550523
        ],
        1E-5
    );

    let result =
        std::panic::catch_unwind(|| level2::trmv('x', 'n', 'n', 6, &[0.0], 6, &mut [], 1));
    assert!(result.is_err());

    let result =
        std::panic::catch_unwind(|| level2::trmv('l', 'x', 'n', 6, &[0.0], 6, &mut [], 1));
    assert!(result.is_err());

    let result =
        std::panic::catch_unwind(|| level2::trmv('l', 't', 'x', 6, &[0.0], 6, &mut [], 1));
    assert!(result.is_err());

    let result =
        std::panic::catch_unwind(|| level2::trmv('l', 't', 'n', 6, &[0.0], 6, &mut [], 0));
    assert!(result.is_err());

    let result =
        std::panic::catch_unwind(|| level2::trmv('l', 't', 'n', 6, &[0.0], 5, &mut [], 1));
    assert!(result.is_err());
}

#[test]
fn trsv() {
    let a = fixtures::M6X6U();
    let mut x = vec![
        0.0, /*-0.08252376201716412,*/
        0.6060734308621007,
        -0.8874201453170976,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trsv('u', 'n', 'n', 6, &a, 6, &mut x, -1);
    approximately!(
        x,
        vec![
            0.0000000000000000,
            -0.557_820_294_115_323_6,
            0.867_101_332_536_618_6,
            -261.16262399406247,
            301.13343516177395,
            9.443_211_204_370_696
        ],
        1E-4
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trsv('u', 'n', 'u', 6, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            1.174_975_918_948_758,
            0.781_911_863_927_240_2,
            0.340_834_063_036_270_6,
            0.17037616997843336,
            1.002_608_728_077_405,
            0.550_393_342_971_801_8
        ],
        1E-4
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trsv('u', 't', 'n', 6, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            -7.831_430_115_471_424E-2,
            -0.581_603_067_802_304_4,
            187.05086808602871,
            -145.50587380040002,
            54.496024225473036,
            147.35034084184912
        ],
        1E-4
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trsv('u', 't', 'u', 6, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            -8.252_376_317_977_905E-2,
            0.622_387_088_031_176_8,
            0.789_016_288_559_637_6,
            0.350_158_970_139_842_2,
            -0.12433160387523684,
            1.2255934857017796
        ],
        1E-4
    );

    let a = fixtures::M6X6L();
    let mut x = vec![
        0.0, /* -0.08252376201716412,*/
        0.6060734308621007,
        -0.8874201453170976,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trsv('l', 'n', 'n', 6, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            0.0000000000000000,
            -2.0564350299322176,
            3.005_462_990_471_773,
            16.659_479_471_000_66,
            0.822_208_091_733_184_2,
            -10.285404879430091
        ],
        1E-4
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trsv('l', 'n', 'u', 6, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            -8.252_376_317_977_905E-2,
            0.579_151_434_811_064_9,
            0.11308010837917339,
            -1.1356976816938495,
            6.776_437_043_701_22E-2,
            1.8970665540252198
        ],
        1E-4
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trsv('l', 't', 'n', 6, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            -0.35540515552701807,
            -9.290_159_741_613_948,
            -0.750_121_328_651_904,
            -0.647_907_987_347_179_2,
            -0.25731628521585004,
            0.47780860806694775
        ],
        1E-4
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trsv('l', 't', 'u', 6, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            1.3381974790667357,
            1.7132221723919971,
            0.25167885419044456,
            -0.38082104951807116,
            0.327_156_714_217_532_7,
            0.550_393_342_971_801_8
        ],
        1E-4
    );

    let a = fixtures::M6X6L();
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trsv('l', 't', 'u', 0, &a, 6, &mut x, 1);
    approximately!(
        x,
        vec![
            -0.08252376201716412,
            0.6060734308621007,
            0.0,
            0.10542139019376515,
            0.3528744733184766,
            0.5503933584550523
        ],
        1E-4
    );
    let result =
        std::panic::catch_unwind(|| level2::trsv('x', 'n', 'n', 6, &[0.0], 6, &mut [], 1));
    assert!(result.is_err());

    let result =
        std::panic::catch_unwind(|| level2::trsv('l', 'x', 'n', 6, &[0.0], 6, &mut [], 1));
    assert!(result.is_err());

    let result =
        std::panic::catch_unwind(|| level2::trsv('l', 't', 'x', 6, &[0.0], 6, &mut [], 1));
    assert!(result.is_err());

    let result =
        std::panic::catch_unwind(|| level2::trsv('l', 't', 'n', 6, &[0.0], 4, &mut [], 1));
    assert!(result.is_err());

    let result =
        std::panic::catch_unwind(|| level2::trsv('l', 't', 'n', 6, &[0.0], 6, &mut [], 0));
    assert!(result.is_err());
}
